//  https://www.acmicpc.net/problem/1931
/*
문제
한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자. 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.

입력
첫째 줄에 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다. 시작 시간과 끝나는 시간은 231-1보다 작거나 같은 자연수 또는 0이다.

출력
첫째 줄에 최대 사용할 수 있는 회의의 최대 개수를 출력한다.
*/
#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

bool Compare(pair<unsigned int, unsigned int> a, pair<unsigned int, unsigned int> b)
{
	if (a.second == b.second) // 종료시간이 같을 경우
		return a.first < b.first; // 시작시간이 작은것부터 정렬

	else // 1번째로 종료시간 기준으로
		return a.second < b.second; // 종료시간 작은것부터 정렬
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N; // 회의 수
	cin >> N;

	vector<pair<unsigned int, unsigned int>>conference; // conference vec 선언
	for (int i = 0; i < N; ++i)
	{
		unsigned int start_time; // 회의 시작 시간
		unsigned int end_time; // 회의 종료 시간

		cin >> start_time >> end_time;

		conference.push_back(make_pair(start_time, end_time)); //make_pair로 push_back
	}

	sort(conference.begin(), conference.end(), Compare); // 종료시간이 낮은 순부터 차례로 정렬

	int count = 0;
	int temp = 0;
	for (int i = 0; i < N; ++i)
	{
		if (temp <= conference[i].first)
		{
			count++;
			temp = conference[i].second;
		}
	}

	cout << count;

	return 0;
}